"""
Generates code by expanding parameter lists

Distributed under the terms of the GPL (GNU Public License)

The LASS License:

Copyright 2004 Bram de Greve and Tom De Muer

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
"""

# last commit: 
# $Revision$
# $Date$
# $Author$

import re
import string
import sys
import time



maxLevel = 3
begins = ['<', '\{', '\[', '\(']
ends = ['>', '\}', '\]', '\)']
now = time.asctime()



def _resolver(matchobj, i):
	character = matchobj.group(1)
	if character == 'x':
		return str(i)
	elif character == 'y':
		return str(i + 1)
	elif character == 'g':
		return 'Generated by param_expander.py on %s' % now
	else:
		return character



""" substitute instances of $x, $y and $g, except if it's preceeded by a second $ like $$x .... """
def _substitute(text, i):
		r = re.compile(r'\$(.)', re.MULTILINE | re.DOTALL)
		return r.sub(lambda x: _resolver(x, i), text)



def _expand(matchobj,n,level):
	parts = [_substitute(_scan(matchobj.group(2), i + 1, level + 1), i + 1) for i in range(n)]
	joint = ', '
	if '\n' in matchobj.group(2):
		joint = ''
	expanded = string.join(parts, joint)
	return string.join([matchobj.group(1), expanded, matchobj.group(3)], '')

	
def _scan(text, n, level):
	if level > maxLevel:
		return text	
	r = re.compile(r'([^$]|\A)\$' + begins[level] + r'(.*?)' + ends[level] + r'\$([^$]|\Z)', 
				re.MULTILINE | re.DOTALL)
	text = r.sub(lambda x: _expand(x,n,level), text)
	text = _scan(text, n, level + 1)
	text = _substitute(text, n)	
	return text



def _generateFile(outFileName, text, i):
	print outFileName,
	try:
		outFile = file(outFileName, 'r')
		currentContent = outFile.read()
		outFile.close()
	except:
		currentContent = ""
	newContent = expand(text, i)
	if newContent != currentContent:
		outFile = file(outFileName, 'w')
		outFile.write(newContent)
		outFile.close()
		print "updated"
	else:
		print "still up to date"


"""
Expands parameters in text to the size of i
	"""
def expand(text, i):
	return _scan(text, i, 0)



"""
Expands parameters in file inFileName to the size of n and save in file outFileName.
If outFileName contains $x then for each value i in range [1, n], an output file
with $x being replaced by i will be generated, and in each of these files the parameters
will be expanded to the size of i instead of n.
	"""
def expandFile(inFileName, outFileName, n):
	inFile = open(inFileName, 'r')
	text = inFile.read()
	inFile.close()
	if re.search(r'\$x', outFileName):
		r = re.compile(r'\$x', re.MULTILINE | re.DOTALL)
		for i in range(n):
			_generateFile(r.sub(str(i + 1), outFileName), text, i + 1)
	else:
		_generateFile(outFileName, text, n)



def main(argv):
	argc = len(argv)
	if argc == 4:
		expandFile(argv[1], argv[2], int(argv[3]))


if __name__ == "__main__":
	main(sys.argv)


# History:
#
# $Log$
# Revision 1.4  2005/05/23 19:26:26  bramz
# some operator changes to colors and images
#
# Revision 1.3  2004/11/28 17:08:11  bramz
# fixed bug revealed by python2.4 and improved substitution scheme
#
# Revision 1.2  2004/09/13 16:07:15  bramz
# *** empty log message ***
#
# Revision 1.1  2004/09/13 14:55:18  bramz
# porting param_expander from perl to python
#
#
# EOF
