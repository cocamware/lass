"""
Generates code by expanding parameter lists
	"""

# last commit: 
# $Revision$
# $Date$
# $Author$

import re
import string
import sys
import time



maxLevel = 3
begins = ['<', '\{', '\[', '\(']
ends = ['>', '\}', '\]', '\)']
now = time.asctime()



def _substitute(text, i):
	r = re.compile(r'([^$]|\A)\$x', re.MULTILINE | re.DOTALL)
	text = r.sub(r'\1' + str(i), text)	
	r = re.compile(r'([^$]|\A)\$y', re.MULTILINE | re.DOTALL)
	text = r.sub(r'\1' + str(i + 1), text)	
	r = re.compile(r'([^$]|\A)\$g', re.MULTILINE | re.DOTALL)
	text = r.sub(r'\1Generated by param_expander.py on ' + now, text)
	return text



def _expand(matchobj,n,level):
	parts = [_substitute(_scan(matchobj.group(2), i + 1, level + 1), i + 1) for i in range(n)]
	joint = ', '
	if '\n' in matchobj.group(2):
		joint = ''
	expanded = string.join(parts, joint)
	return string.join([matchobj.group(1), expanded, matchobj.group(3)], '')

	
def _scan(text, n, level):
	if level > maxLevel:
		return text	
	r = re.compile(r'([^$]|\A)\$' + begins[level] + r'(.*?)' + ends[level] + r'\$([^$]|\Z)', 
				   re.MULTILINE | re.DOTALL)
	text = r.sub(lambda x:_expand(x,n,level), text)
	text = _scan(text, n, level + 1)
	text = _substitute(text, n)	
	return text




def _generateFile(outFileName, text, i):
	print outFileName
	outFile = open(outFileName, 'w')
	outFile.write(expand(text, i))
	outFile.close()


"""
Expands parameters in text to the size of i
	"""
def expand(text, i):
	return _scan(text, i, 0)



"""
Expands parameters in file inFileName to the size of n and save in file outFileName.
If outFileName contains $x then for each value i in range [1, n], an output file
with $x being replaced by i will be generated, and in each of these files the parameters
will be expanded to the size of i instead of n.
	"""
def expandFile(inFileName, outFileName, n):
	inFile = open(inFileName, 'r')
	text = inFile.read()
	inFile.close()
	if re.search(r'\$x', outFileName):
		r = re.compile(r'\$x', re.MULTILINE | re.DOTALL)
		for i in range(n):
			_generateFile(r.sub(str(i + 1), outFileName), text, i + 1)
	else:
		_generateFile(outFileName, text, n)



def main(argv):
    argc = len(argv)
    if argc == 4:
        expandFile(argv[1], argv[2], int(argv[3]))


if __name__ == "__main__":
    main(sys.argv)


# History:
#
# $Log$
# Revision 1.1  2004/09/13 14:55:18  bramz
# porting param_expander from perl to python
#
#
# EOF