/**	@file
 *	@author Bram de Greve (bramz@users.sourceforge.net)
 *	@author Tom De Muer (tomdemuer@users.sourceforge.net)
 *
 *	*** BEGIN LICENSE INFORMATION ***
 *	
 *	The contents of this file are subject to the Common Public Attribution License 
 *	Version 1.0 (the "License"); you may not use this file except in compliance with 
 *	the License. You may obtain a copy of the License at 
 *	http://lass.sourceforge.net/cpal-license. The License is based on the 
 *	Mozilla Public License Version 1.1 but Sections 14 and 15 have been added to cover 
 *	use of software over a computer network and provide for limited attribution for 
 *	the Original Developer. In addition, Exhibit A has been modified to be consistent 
 *	with Exhibit B.
 *	
 *	Software distributed under the License is distributed on an "AS IS" basis, WITHOUT 
 *	WARRANTY OF ANY KIND, either express or implied. See the License for the specific 
 *	language governing rights and limitations under the License.
 *	
 *	The Original Code is LASS - Library of Assembled Shared Sources.
 *	
 *	The Initial Developer of the Original Code is Bram de Greve and Tom De Muer.
 *	The Original Developer is the Initial Developer.
 *	
 *	All portions of the code written by the Initial Developer are:
 *	Copyright (C) 2004-2020 the Initial Developer.
 *	All Rights Reserved.
 *	
 *	Contributor(s):
 *
 *	Alternatively, the contents of this file may be used under the terms of the 
 *	GNU General Public License Version 2 or later (the GPL), in which case the 
 *	provisions of GPL are applicable instead of those above.  If you wish to allow use
 *	of your version of this file only under the terms of the GPL and not to allow 
 *	others to use your version of this file under the CPAL, indicate your decision by 
 *	deleting the provisions above and replace them with the notice and other 
 *	provisions required by the GPL License. If you do not delete the provisions above,
 *	a recipient may use your version of this file under either the CPAL or the GPL.
 *	
 *	*** END LICENSE INFORMATION ***
 */

#include "test_common.h"

#if LASS_COMPILER_TYPE == LASS_COMPILER_TYPE_MSVC
#	pragma warning(disable: 4244) // float to int
#endif

#include "../lass/util/callback_0.h"
$(#include "../lass/util/callback_$x.h"
)$
#include "../lass/util/callback_r_0.h"
$(#include "../lass/util/callback_r_$x.h"
)$

#define LASS_TEST_CALLBACK_CALL(expression)\
	dispatcherIsCalled = false;\
	LASS_TEST_CHECK_NO_THROW(expression);\
	LASS_TEST_CHECK_MESSAGE(dispatcherIsCalled, "non-empty '" #expression "' didn't execute dispatcher.");

#define LASS_TEST_CALLBACK_CALL_R(expression)\
	dispatcherIsCalled = false;\
	{\
		int result = 666;\
		LASS_TEST_CHECK_NO_THROW(result = expression);\
		LASS_TEST_CHECK_MESSAGE(result == 1, "non-empty '" #expression "' didn't return correct value.");\
		LASS_TEST_CHECK_MESSAGE(dispatcherIsCalled, "non-empty '" #expression "' didn't execute dispatcher.");\
	}

#define LASS_TEST_CALLBACK_EMPTY_CALL(expression)\
	dispatcherIsCalled = false;\
	LASS_TEST_CHECK_NO_THROW(expression);\
	LASS_TEST_CHECK_MESSAGE(!dispatcherIsCalled, "empty '" #expression "' did execute dispatcher.");

#define LASS_TEST_CALLBACK_EMPTY_CALL_R(expression)\
	dispatcherIsCalled = false;\
	{\
		int result = 666;\
		LASS_TEST_CHECK_THROW(result = expression, util::Exception);\
		LASS_TEST_CHECK_MESSAGE(result != 1, "empty '" #expression "' did return value.");\
		LASS_TEST_CHECK_MESSAGE(!dispatcherIsCalled, "empty '" #expression "' did execute dispatcher.");\
	}

namespace
{

bool dispatcherIsCalled;

}

namespace lass
{
namespace test
{

void free0() { dispatcherIsCalled = true; }
$[void free$x($(int /*i_p$x*/)$) { dispatcherIsCalled = true; }
]$int freeR0() { dispatcherIsCalled = true; return 1; }
$[int freeR$x($(int /*i_p$x*/)$) { dispatcherIsCalled = true; return 1;}
]$
struct Foo
{
	void mem0() { dispatcherIsCalled = true; }
$[    void mem$x($(int /*i_p$x*/)$) { dispatcherIsCalled = true; }
]$    int memR0() { dispatcherIsCalled = true; return 1; }
$[    int memR$x($(int /*i_p$x*/)$) { dispatcherIsCalled = true; return 1;}
]$
	void const_mem0() const { dispatcherIsCalled = true; }
$[    void const_mem$x($(int /*i_p$x*/)$) const { dispatcherIsCalled = true; }
]$    int const_memR0() const { dispatcherIsCalled = true; return 1; }
$[    int const_memR$x($(int /*i_p$x*/)$) const { dispatcherIsCalled = true; return 1;}
]$};

void testUtilCallback0()
{
	Foo foo;

	typedef util::Callback0 TCallback;

	{
		// empty callback
		TCallback cb_empty_0;
		LASS_TEST_CHECK(cb_empty_0.isEmpty());
		LASS_TEST_CHECK(!cb_empty_0);
		LASS_TEST_CALLBACK_EMPTY_CALL(cb_empty_0());
	}

	{
		// callback to free function
		TCallback cb_free_0(free0);
		LASS_TEST_CHECK(!cb_free_0.isEmpty());
		LASS_TEST_CHECK(cb_free_0);
		LASS_TEST_CHECK(!(!cb_free_0));
		LASS_TEST_CALLBACK_CALL(cb_free_0());
	}

#if LASS_HAVE_CPP_STD_11
	{
		// callback to lambda
		TCallback cb_lambda_0([]() { free0(); });
		LASS_TEST_CHECK(cb_lambda_0);
		LASS_TEST_CALLBACK_CALL(cb_lambda_0());
	}
#endif

	{
		// callback to non-const member
		TCallback cb_mem_0(&foo, &Foo::mem0);
		LASS_TEST_CHECK(cb_mem_0);
		LASS_TEST_CALLBACK_CALL(cb_mem_0());
	}

	{
		// callback to const member
		TCallback cb_const_mem_0(&foo, &Foo::const_mem0);
		LASS_TEST_CHECK(cb_const_mem_0);
		LASS_TEST_CALLBACK_CALL(cb_const_mem_0());
	}

	{
		// copy constructor
		TCallback cb1_0(free0);
		TCallback cb2_0(cb1_0);
		LASS_TEST_CHECK_EQUAL(cb1_0, cb2_0);
		LASS_TEST_CHECK(cb1_0);
		LASS_TEST_CALLBACK_CALL(cb1_0());
		LASS_TEST_CHECK(cb2_0);
		LASS_TEST_CALLBACK_CALL(cb2_0());
	}

	{
		// copy assignment
		TCallback cb1_0(free0);
		TCallback cb2_0;
		LASS_TEST_CHECK(!cb2_0);
		cb2_0 = cb1_0;
		LASS_TEST_CHECK_EQUAL(cb1_0, cb2_0);
		LASS_TEST_CHECK(cb1_0);
		LASS_TEST_CALLBACK_CALL(cb1_0());
		LASS_TEST_CHECK(cb2_0);
		LASS_TEST_CALLBACK_CALL(cb2_0());
	}

	{
		// assign free function
		TCallback cb_assign_free_0;
		LASS_TEST_CHECK(!cb_assign_free_0);
		cb_assign_free_0 = free0;
		LASS_TEST_CHECK(cb_assign_free_0);
		LASS_TEST_CALLBACK_CALL(cb_assign_free_0());
	}

#if LASS_HAVE_CPP_STD_11
	{
		// assign lambda function function
		TCallback cb_assign_lambda_0;
		LASS_TEST_CHECK(!cb_assign_lambda_0);
		cb_assign_lambda_0 = []() { free0(); };
		LASS_TEST_CHECK(cb_assign_lambda_0);
		LASS_TEST_CALLBACK_CALL(cb_assign_lambda_0());
	}
#endif

	{
		// swap
		TCallback cb1_0(free0);
		TCallback cb2_0;
		cb2_0.swap(cb1_0);
		LASS_TEST_CHECK(!cb1_0);
		LASS_TEST_CHECK(cb2_0);
		LASS_TEST_CHECK(cb1_0 != cb2_0);
		LASS_TEST_CALLBACK_CALL(cb2_0());
	}

	{
		// comparison
		TCallback cb_empty_0;
		TCallback cb_free1_0(free0);
		TCallback cb_free2_0(free0);
		TCallback cb_mem_0(&foo, &Foo::mem0);
		LASS_TEST_CHECK_EQUAL(cb_free1_0, cb_free2_0);
		LASS_TEST_CHECK(cb_empty_0 != cb_free1_0);
		LASS_TEST_CHECK(cb_free1_0 != cb_empty_0);
		LASS_TEST_CHECK(cb_free1_0 != cb_mem_0);
	}
}

$[

void testUtilCallback$x()
{
	Foo foo;

	typedef util::Callback$x<$(int)$> TCallback;

	{
		// empty callback
		TCallback cb_empty_$x;
		LASS_TEST_CHECK(cb_empty_$x.isEmpty());
		LASS_TEST_CHECK(!cb_empty_$x);
		LASS_TEST_CALLBACK_EMPTY_CALL(cb_empty_$x($($x)$));
	}

	{
		// callback to free function
		TCallback cb_free_$x(free$x);
		LASS_TEST_CHECK(!cb_free_$x.isEmpty());
		LASS_TEST_CHECK(cb_free_$x);
		LASS_TEST_CHECK(!(!cb_free_$x));
		LASS_TEST_CALLBACK_CALL(cb_free_$x($($x)$));
	}

#if LASS_HAVE_CPP_STD_11
	{
		// callback to lambda function
		TCallback cb_lambda_$x([]($(int p$x)$) { free$x($(p$x)$); });
		LASS_TEST_CHECK(cb_lambda_$x);
		LASS_TEST_CALLBACK_CALL(cb_lambda_$x($($x)$));
	}
#endif

	{
		// callback to non-const member
		TCallback cb_mem_$x(&foo, &Foo::mem$x);
		LASS_TEST_CHECK(cb_mem_$x);
		LASS_TEST_CALLBACK_CALL(cb_mem_$x($($x)$));
	}

	{
		// callback to const member
		TCallback cb_const_mem_$x(&foo, &Foo::const_mem$x);
		LASS_TEST_CHECK(cb_const_mem_$x);
		LASS_TEST_CALLBACK_CALL(cb_const_mem_$x($($x)$));
	}

	{
		// copy constructor
		TCallback cb1_$x(free$x);
		TCallback cb2_$x(cb1_$x);
		LASS_TEST_CHECK_EQUAL(cb1_$x, cb2_$x);
		LASS_TEST_CHECK(cb1_$x);
		LASS_TEST_CALLBACK_CALL(cb1_$x($($x)$));
		LASS_TEST_CHECK(cb2_$x);
		LASS_TEST_CALLBACK_CALL(cb2_$x($($x)$));
	}

	{
		// copy assignment
		TCallback cb1_$x(free$x);
		TCallback cb2_$x;
		LASS_TEST_CHECK(!cb2_$x);
		cb2_$x = cb1_$x;
		LASS_TEST_CHECK_EQUAL(cb1_$x, cb2_$x);
		LASS_TEST_CHECK(cb1_$x);
		LASS_TEST_CALLBACK_CALL(cb1_$x($($x)$));
		LASS_TEST_CHECK(cb2_$x);
		LASS_TEST_CALLBACK_CALL(cb2_$x($($x)$));
	}

	{
		// assign free function
		TCallback cb_assign_free_$x;
		LASS_TEST_CHECK(!cb_assign_free_$x);
		cb_assign_free_$x = free$x;
		LASS_TEST_CHECK(cb_assign_free_$x);
		LASS_TEST_CALLBACK_CALL(cb_assign_free_$x($($x)$));
	}

#if LASS_HAVE_CPP_STD_11
	{
		// assign lambda function function
		TCallback cb_assign_lambda_$x;
		LASS_TEST_CHECK(!cb_assign_lambda_$x);
		cb_assign_lambda_$x = []($(int p$x)$) { free$x($(p$x)$); };
		LASS_TEST_CHECK(cb_assign_lambda_$x);
		LASS_TEST_CALLBACK_CALL(cb_assign_lambda_$x($($x)$));
	}
#endif

	{
		// swap
		TCallback cb1_$x(free$x);
		TCallback cb2_$x;
		cb2_$x.swap(cb1_$x);
		LASS_TEST_CHECK(!cb1_$x);
		LASS_TEST_CHECK(cb2_$x);
		LASS_TEST_CHECK(cb1_$x != cb2_$x);
		LASS_TEST_CALLBACK_CALL(cb2_$x($($x)$));
	}

	{
		// comparison
		TCallback cb_empty_$x;
		TCallback cb_free1_$x(free$x);
		TCallback cb_free2_$x(free$x);
		TCallback cb_mem_$x(&foo, &Foo::mem$x);
		LASS_TEST_CHECK_EQUAL(cb_free1_$x, cb_free2_$x);
		LASS_TEST_CHECK(cb_empty_$x != cb_free1_$x);
		LASS_TEST_CHECK(cb_free1_$x != cb_empty_$x);
		LASS_TEST_CHECK(cb_free1_$x != cb_mem_$x);
	}
}

]$

void testUtilCallbackR0()
{
	Foo foo;

	typedef util::CallbackR0<int> TCallback;

	{
		// empty callback
		TCallback cb_empty_r0;
		LASS_TEST_CHECK(cb_empty_r0.isEmpty());
		LASS_TEST_CHECK(!cb_empty_r0);
		LASS_TEST_CALLBACK_EMPTY_CALL_R(cb_empty_r0());
	}

	{
		// callback to free function
		TCallback cb_free_r0(freeR0);
		LASS_TEST_CHECK(!cb_free_r0.isEmpty());
		LASS_TEST_CHECK(cb_free_r0);
		LASS_TEST_CHECK(!(!cb_free_r0));
		LASS_TEST_CALLBACK_CALL_R(cb_free_r0());
	}

#if LASS_HAVE_CPP_STD_11
	{
		// callback to lambda function
		TCallback cb_lambda_r0([]() { return freeR0(); });
		LASS_TEST_CHECK(cb_lambda_r0);
		LASS_TEST_CALLBACK_CALL_R(cb_lambda_r0());
	}
#endif

	{
		// callback to non-const member
		TCallback cb_mem_r0(&foo, &Foo::memR0);
		LASS_TEST_CHECK(cb_mem_r0);
		LASS_TEST_CALLBACK_CALL_R(cb_mem_r0());
	}

	{
		// callback to const member
		TCallback cb_const_mem_r0(&foo, &Foo::const_memR0);
		LASS_TEST_CHECK(cb_const_mem_r0);
		LASS_TEST_CALLBACK_CALL_R(cb_const_mem_r0());
	}

	{
		// copy constructor
		TCallback cb1_r0(freeR0);
		TCallback cb2_r0(cb1_r0);
		LASS_TEST_CHECK_EQUAL(cb1_r0, cb2_r0);
		LASS_TEST_CHECK(cb1_r0);
		LASS_TEST_CALLBACK_CALL_R(cb1_r0());
		LASS_TEST_CHECK(cb2_r0);
		LASS_TEST_CALLBACK_CALL_R(cb2_r0());
	}

	{
		// copy assignment
		TCallback cb1_r0(freeR0);
		TCallback cb2_r0;
		LASS_TEST_CHECK(!cb2_r0);
		cb2_r0 = cb1_r0;
		LASS_TEST_CHECK_EQUAL(cb1_r0, cb2_r0);
		LASS_TEST_CHECK(cb1_r0);
		LASS_TEST_CALLBACK_CALL(cb1_r0());
		LASS_TEST_CHECK(cb2_r0);
		LASS_TEST_CALLBACK_CALL(cb2_r0());
	}

	{
		// assign free function
		TCallback cb_assign_free_r0;
		LASS_TEST_CHECK(!cb_assign_free_r0);
		cb_assign_free_r0 = freeR0;
		LASS_TEST_CHECK(cb_assign_free_r0);
		LASS_TEST_CALLBACK_CALL(cb_assign_free_r0());
	}

#if LASS_HAVE_CPP_STD_11
	{
		// assign lambda function function
		TCallback cb_assign_lambda_r0;
		LASS_TEST_CHECK(!cb_assign_lambda_r0);
		cb_assign_lambda_r0 = []() { return freeR0(); };
		LASS_TEST_CHECK(cb_assign_lambda_r0);
		LASS_TEST_CALLBACK_CALL(cb_assign_lambda_r0());
	}
#endif

	{
		// swap
		TCallback cb1_r0(freeR0);
		TCallback cb2_r0;
		cb2_r0.swap(cb1_r0);
		LASS_TEST_CHECK(!cb1_r0);
		LASS_TEST_CHECK(cb2_r0);
		LASS_TEST_CHECK(cb1_r0 != cb2_r0);
		LASS_TEST_CALLBACK_CALL(cb2_r0());
	}

	{
		// comparison
		TCallback cb_empty_r0;
		TCallback cb_free1_r0(freeR0);
		TCallback cb_free2_r0(freeR0);
		TCallback cb_mem_r0(&foo, &Foo::memR0);
		LASS_TEST_CHECK_EQUAL(cb_free1_r0, cb_free2_r0);
		LASS_TEST_CHECK(cb_empty_r0 != cb_free1_r0);
		LASS_TEST_CHECK(cb_free1_r0 != cb_empty_r0);
		LASS_TEST_CHECK(cb_free1_r0 != cb_mem_r0);
	}
}

$[

void testUtilCallbackR$x()
{
	Foo foo;

	typedef util::CallbackR$x<int, $(int)$> TCallback;

	{
		// empty callback
		TCallback cb_empty_r$x;
		LASS_TEST_CHECK(cb_empty_r$x.isEmpty());
		LASS_TEST_CHECK(!cb_empty_r$x);
		LASS_TEST_CALLBACK_EMPTY_CALL_R(cb_empty_r$x($($x)$));
	}

	{
		// callback to free function
		TCallback cb_free_r$x(freeR$x);
		LASS_TEST_CHECK(!cb_free_r$x.isEmpty());
		LASS_TEST_CHECK(cb_free_r$x);
		LASS_TEST_CHECK(!(!cb_free_r$x));
		LASS_TEST_CALLBACK_CALL_R(cb_free_r$x($($x)$));
	}

#if LASS_HAVE_CPP_STD_11
	{
		// callback to lambda function
		TCallback cb_lambda_r$x([]($(int p$x)$) { return freeR$x($(p$x)$); });
		LASS_TEST_CHECK(cb_lambda_r$x);
		LASS_TEST_CALLBACK_CALL_R(cb_lambda_r$x($($x)$));
	}
#endif

	{
		// callback to non-const member
		TCallback cb_mem_r$x(&foo, &Foo::memR$x);
		LASS_TEST_CHECK(cb_mem_r$x);
		LASS_TEST_CALLBACK_CALL_R(cb_mem_r$x($($x)$));
	}

	{
		// callback to const member
		TCallback cb_const_mem_r$x(&foo, &Foo::const_memR$x);
		LASS_TEST_CHECK(cb_const_mem_r$x);
		LASS_TEST_CALLBACK_CALL_R(cb_const_mem_r$x($($x)$));
	}

	{
		// copy constructor
		TCallback cb1_r$x(freeR$x);
		TCallback cb2_r$x(cb1_r$x);
		LASS_TEST_CHECK_EQUAL(cb1_r$x, cb2_r$x);
		LASS_TEST_CHECK(cb1_r$x);
		LASS_TEST_CALLBACK_CALL(cb1_r$x($($x)$));
		LASS_TEST_CHECK(cb2_r$x);
		LASS_TEST_CALLBACK_CALL(cb2_r$x($($x)$));
	}

	{
		// copy assignment
		TCallback cb1_r$x(freeR$x);
		TCallback cb2_r$x;
		LASS_TEST_CHECK(!cb2_r$x);
		cb2_r$x = cb1_r$x;
		LASS_TEST_CHECK_EQUAL(cb1_r$x, cb2_r$x);
		LASS_TEST_CHECK(cb1_r$x);
		LASS_TEST_CALLBACK_CALL(cb1_r$x($($x)$));
		LASS_TEST_CHECK(cb2_r$x);
		LASS_TEST_CALLBACK_CALL(cb2_r$x($($x)$));
	}

	{
		// assign free function
		TCallback cb_assign_free_r$x;
		LASS_TEST_CHECK(!cb_assign_free_r$x);
		cb_assign_free_r$x = freeR$x;
		LASS_TEST_CHECK(cb_assign_free_r$x);
		LASS_TEST_CALLBACK_CALL(cb_assign_free_r$x($($x)$));
	}

#if LASS_HAVE_CPP_STD_11
	{
		// assign lambda function function
		TCallback cb_assign_lambda_r$x;
		LASS_TEST_CHECK(!cb_assign_lambda_r$x);
		cb_assign_lambda_r$x = []($(int p$x)$) { return freeR$x($(p$x)$); };
		LASS_TEST_CHECK(cb_assign_lambda_r$x);
		LASS_TEST_CALLBACK_CALL(cb_assign_lambda_r$x($($x)$));
	}
#endif

	{
		// swap
		TCallback cb1_r$x(freeR$x);
		TCallback cb2_r$x;
		cb2_r$x.swap(cb1_r$x);
		LASS_TEST_CHECK(!cb1_r$x);
		LASS_TEST_CHECK(cb2_r$x);
		LASS_TEST_CHECK(cb1_r$x != cb2_r$x);
		LASS_TEST_CALLBACK_CALL(cb2_r$x($($x)$));
	}

	{
		// comparison
		TCallback cb_empty_r$x;
		TCallback cb_free1_r$x(freeR$x);
		TCallback cb_free2_r$x(freeR$x);
		TCallback cb_mem_r$x(&foo, &Foo::memR$x);
		LASS_TEST_CHECK_EQUAL(cb_free1_r$x, cb_free2_r$x);
		LASS_TEST_CHECK(cb_empty_r$x != cb_free1_r$x);
		LASS_TEST_CHECK(cb_free1_r$x != cb_empty_r$x);
		LASS_TEST_CHECK(cb_free1_r$x != cb_mem_r$x);
	}
}

]$

TUnitTest test_util_callback()
{
	TUnitTest result;
	result.push_back(LASS_TEST_CASE(testUtilCallback0));
	$(result.push_back(LASS_TEST_CASE(testUtilCallback$x));
	)$
	result.push_back(LASS_TEST_CASE(testUtilCallbackR0));
	$(result.push_back(LASS_TEST_CASE(testUtilCallbackR$x));
	)$
	return result;
}

}

}

// EOF
